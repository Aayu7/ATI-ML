from Tkinter import *
import tkFileDialog
from skimage import io
import ATI_ML
import pexif

def uploadWindow():
	uploadWin = Toplevel()
	uploadWin.title('Upload Window')
	uploadWin.minsize(200, 100)
	uploadWin.focus_set()

	uploadWindow.file_opt = options = {}
	options['defaultextension'] = '.jpg'
	options['filetypes'] = [('all files', '.*'), ('image files', '.jpg')]
	options['initialdir'] = 'C:\\'
	options['initialfile'] = 'image.jpg'
	options['parent'] = uploadWin
	options['title'] = 'Choose an image'

	def askopenfilename():
		filename = tkFileDialog.askopenfilename(**uploadWindow.file_opt)
		img = io.imread(filename, as_grey = True)
		tag = ATI_ML.predictImg(img)
		confirmTagWin(tag, filename)

	Label(uploadWin, text = "Choose the image you want to tag").grid(pady = 10, padx = 20)
	Button(uploadWin, text='Open File', command=askopenfilename).grid(padx = 10, pady = 20, row = 1, column = 1)
	Button(uploadWin, text = 'Close', command = uploadWin.destroy).grid(padx = 10, pady = 20, row = 1, column = 2)


def confirmTagWin(tag, filename):
	confirmTag = Toplevel()
	confirmTag.grid()
	confirmTag.minsize(200, 100)

	def writeTag():
		img = pexif.JpegFile.fromFile(filename)
		img.exif.primary.ImageDescription = tag
		img.exif.primary.ExtendedEXIF.UserComment = "Generated by ATI"
		img.writeFile(filename)
		confirmTag.destroy()
		
		successTag = Toplevel()
		successTag.title('Train System')
		successTag.grid()
		successTag.minsize(200, 50)
		Label(successTag, text = "Successfully wrote tag to file.").grid(pady = 10, padx = 20)
		Button(successTag, text = 'Close', command = successTag.destroy).grid(padx = 2, pady = 20, column = 2, row = 2)


	textdisplay = "We found the picture to be an image of " + tag + ". Write tag to file?"
	Label(confirmTag, text = textdisplay).grid(pady = 10, padx = 20)
	Button(confirmTag, text = 'OK', command = writeTag).grid(padx = 2, pady = 20, column = 1, row = 2)
	Button(confirmTag, text = 'Close', command = confirmTag.destroy).grid(padx = 2, pady = 20, column = 2, row = 2)
	confirmTag.focus_set()



def trainSysWin():
	ATI_ML.trainSys()
	trainWin = Toplevel()
	trainWin.title('Train System')
	trainWin.grid()
	trainWin.minsize(200, 100)

	Label(trainWin, text = "Successfully trained the system!").grid(pady = 10, padx = 20)
	Button(trainWin, text = 'Close', command = trainWin.destroy).grid(pady = 20)


class Application(Frame):
	def __init__(self, master = None):
		Frame.__init__(self, master)
		self.grid()
		self.createWidgets()

	def createWidgets(self):
		Label(self, text = "Choose your option:").grid(pady = 10, padx = 20)

		self.uploadButton = Button(self, text = 'Classify Image', command = uploadWindow)
		self.uploadButton.grid(padx = 30, pady = 10, row = 1)

		self.trainButton = Button(self, text = 'Train system', command = trainSysWin)
		self.trainButton.grid(padx = 30, pady = 10, row = 2)

		self.quitButton = Button(self, text = 'Close', command = self.quit)
		self.quitButton.grid(padx = 30, pady = 10, row = 3)


root = Tk()
app = Application(master=root)
app.master.title('Auto-Tag Images')
app.master.minsize(200, 200)
app.mainloop()
root.destroy()